<!---
Warning! This file is autogenerated by generate.py. To modify it, you must modify the template (Readme.md.jinja2)
and then rerun generate.py. See below for more details. Weird, I know, but its the easiest way to keep this sucker
up to date!
--->

# docker-python-node

Handy Docker containers with python and node installed securely to use as base Docker images for your application.

# How to Use

Select a Python version, select a Node version, and select an OS that suits your needs, and then pick the tag that includes those. Or, if you want to use the latest, just use `latest` in the place of the version string. When picking your version, you can be specific and use `3.7.0`, or use a major/minor like `3.7`, or just use the major version like `3.` See the exhaustive list of available tags below.

For example, to get Python 3.6.x and Node 8.x.x on Debian Stretch, use the tag `3.6-8-stretch` like so:

```
$ docker run airhorns/python-node:3.6-8-stretch python --version && node --version
```

To use the latest Node version but fix your python version, use the `latest` version string like so:

```
$ docker run airhorns/python-node:3.6-latest-stretch python --version && node --version
```

To use the latest of all the stuff and the default OS, just use the `latest` tag:

```
$ docker run airhorns/python-node:latest python --version && node --version
```

Tags are always structured like so: `<python_version>-<node_version>-<os>`.

### Available Software Versions

Python:
{% for version, properties in config['python_versions'].items() -%}
  - {{ version }}, aliased as {{ properties['aliases'] | monospaced_list }}
{% endfor -%}

Node:
{% for version, properties in config['node_versions'].items() -%}
  - {{ version }}, aliased as {{ properties['aliases'] | monospaced_list }}
{% endfor -%}

# Available OSes

 - `stretch` - Debian Stretch, from `python:3-stretch` for example. Good default.
 - `slim-stretch` - Slim Debian Stretch, from `python:3-slim` for example. Missing lots of things you might be used to having like curl etc, but much smaller.
 - `alpine3.8` - Alpine Linux, from `python:3-alpine` for example. Results in very small containers, but has just about nothing other than what it needs to run pythion and node. Can also have a [big performance hit](https://superuser.com/questions/1219609/why-is-the-alpine-docker-image-over-50-slower-than-the-ubuntu-image/1234279) depending on the usage patterns.

# All Available Tags

The currently built tags are:

{% for build in builds -%}
 - __`{{ build['tag'] }}`__: {{ build['alias_tags'] | monospaced_list }}
{% endfor -%}

See the complete list at https://hub.docker.com/r/{{ config['image_name'] }}/tags/.

# Usage

Python and Node are installed to the system-wide default location, are on the path, and aren't wrapped by any version managers like `pyenv` or `nvm`. So, you should just be able to invoke `python` or `node` in your dockerfiles or applications and it will just work!

# Contributing

This repo is a big folder of Dockerfiles and a build configuration to actually build containers. The containers are built on CircleCI.

The actual Dockerfiles & Circle config is generated by `generate.py` from `config.yml`. To change or add a new version of one of the softwares, add it to `config.yml`, run `generate.py`, and you should find an updated set of Dockerfiles, CircleCI build config, and Readme reporting all the new stuff you've added.

To modify the structure of any of the generated files, examine the Jinja2 templates in the `templates` directory.

# License

MIT
